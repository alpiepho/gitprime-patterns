(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{196:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),r=n(197),o=n(198),s=n(211),l=(n(38),n(204)),m=(n(212),n(213)),c=function(e){var t=Object(a.useState)("right"),n=t[0],r=t[1];return i.a.createElement("div",{className:"about"},i.a.createElement("hr",null),i.a.createElement("div",{className:"about-section"},i.a.createElement("p",null,m.siteNote," Code is on"," ",i.a.createElement("a",{rel:"noopener noreferrer",href:m.siteNoteGitHub,target:"_blank"},"Github")),i.a.createElement("div",{className:"about-section-header full-width"},m.siteImagePre?i.a.createElement("img",{className:"about-imagepre",src:m.siteImagePre,alt:"about imagepre"}):null,i.a.createElement("h1",null,m.siteTitle),m.siteImagePost?i.a.createElement("img",{className:"about-imagepost",src:m.siteImagePost,alt:"about imagepost"}):null,i.a.createElement("p",null,m.siteDescription))),i.a.createElement("div",{className:"about-button-section"},i.a.createElement("button",{className:"about-button",onClick:function(t){"right"===n?(r("down"),e.handleOpenAll()):(r("right"),e.handleCloseAll())}},i.a.createElement("h3",{className:"about-label"},"right"===n?i.a.createElement(l.d,null):i.a.createElement(l.c,null)," all")),i.a.createElement("button",{className:"about-button",onClick:function(t){e.handleRandom()}},i.a.createElement("h3",{className:"about-label"},i.a.createElement(l.f,null)," rand")),i.a.createElement("button",{className:"about-button",onClick:function(t){e.handlePrev()}},i.a.createElement("h3",{className:"about-label"},i.a.createElement(l.a,null)," prev")),i.a.createElement("button",{className:"about-button",onClick:function(t){e.handleNext()}},i.a.createElement("h3",{className:"about-label"},i.a.createElement(l.b,null)," next")),i.a.createElement("button",{className:"about-button",onClick:function(t){r("right"),e.handleReset()}},i.a.createElement("h3",{className:"about-label"},i.a.createElement(l.e,null)," rst"))))},h=function(e){var t=Object(a.useState)("right"),n=t[0],r=t[1],o=Object(a.useState)(!1),s=o[0],m=o[1];return i.a.createElement("div",{className:e.classBase},i.a.createElement("button",{className:e.classButton,onClick:function(e){"right"===n?(r("down"),m(!0)):(r("right"),m(!1))}},i.a.createElement("h3",{className:e.classLabel},"down"===n||e.forceOpen?i.a.createElement(l.c,null):i.a.createElement(l.d,null)," ",e.name)),s|e.forceOpen?i.a.createElement("div",{className:e.classContent},e.children):null)},d=(n(214),function(e){var t=e.subTerm,n=e.forceOpen;return i.a.createElement(h,{classBase:"subtermsimple",classButton:"subtermsimple-button",classLabel:"subtermsimple-label",classContent:"subtermsimple-section",name:t.name,forceOpen:n},t.description)}),u=(n(215),function(e){var t=e.subTerm,n=e.forceOpen;return i.a.createElement(h,{classBase:"subtermlist",classButton:"subtermlist-button",classLabel:"subtermlist-label",classContent:"subtermlist-section",name:t.name,forceOpen:n},t.ordered?i.a.createElement("ol",null,t.list.map(function(e,t){return i.a.createElement("li",{key:t},e.description)})):i.a.createElement("ul",null,t.list.map(function(e,t){return i.a.createElement("li",{key:t},e.description)})))}),p=(n(216),function(e){var t=e.subTerm,n=e.forceOpen;return i.a.createElement(h,{classBase:"subtermlinks",classButton:"subtermlinks-button",classLabel:"subtermlinks-label",classContent:"subtermlinks-section",name:t.name,forceOpen:n},i.a.createElement("ul",null,t.list.map(function(e,t){return i.a.createElement("li",{key:t},i.a.createElement("a",{className:"subtermlinks-link",target:"_blank",rel:"noopener noreferrer",href:e.url},e.name?e.name:e.url))})))}),g=(n(217),function(e){var t=e.subTerm,n=e.forceOpen;return i.a.createElement(h,{classBase:"subtermgoogle",classButton:"subtermgoogle-button",classLabel:"subtermgoogle-label",classContent:"subtermgoogle-section",name:t.name,forceOpen:n},i.a.createElement("ul",null,t.list.map(function(e,t){var n="https://www.google.com/search?q="+e.name;return i.a.createElement("li",{key:t},i.a.createElement("a",{className:"subtermgoogle-link",target:"_blank",rel:"noopener noreferrer",href:n},e.name))})))}),b=(n(218),function(e){var t=e.term;return i.a.createElement(h,{classBase:"term",classButton:"term-button",classLabel:"term-label",classContent:"term-section",name:t.name,forceOpen:t.forceOpen},t.imagePre?i.a.createElement("img",{className:"term-imagepre",src:t.imagePre,alt:"term imagepre"}):null,i.a.createElement("div",{className:"term-description"},t.description),t.imagePost?i.a.createElement("img",{className:"term-imagepost",src:t.imagePost,alt:"term imagepost"}):null,i.a.createElement("div",null,t.subtermsimple&&t.subtermsimple.name?i.a.createElement(d,{subTerm:t.subtermsimple,forceOpen:t.forceOpen}):null),i.a.createElement("div",null,t.subtermlist&&t.subtermlist.name?i.a.createElement(u,{subTerm:t.subtermlist,forceOpen:t.forceOpen}):null),i.a.createElement("div",null,t.subtermlinks&&t.subtermlinks.name?i.a.createElement(p,{subTerm:t.subtermlinks,forceOpen:t.forceOpen}):null),i.a.createElement("div",null,t.subtermgoogle&&t.subtermgoogle.name?i.a.createElement(g,{subTerm:t.subtermgoogle,forceOpen:t.forceOpen}):null))}),f=(n(219),function(e){var t=Object(a.useState)([]),n=t[0],r=t[1],o=Object(a.useState)(0),s=o[0],l=o[1];Object(a.useEffect)(function(){r(m(e.data))},[]);var m=function(e){for(var t=[],n=e.allSiteTermsJson.edges.length,a=0;a<n;a++)e.allSiteTermsJson.edges[a].node.name&&t.push(e.allSiteTermsJson.edges[a].node);return t};return i.a.createElement("div",{className:"Application"},i.a.createElement(c,{handleOpenAll:function(){var e=[];n.map(function(t){return t.forceOpen=!0,e.push(t),0}),r(e)},handleCloseAll:function(){var e=[];n.map(function(t){return t.forceOpen=!1,e.push(t),0}),r(e)},handleRandom:function(){for(var t=m(e.data),n=t.length,a=Math.floor(Math.random()*(+n-0))+0,i=[],o=0;o<t.length;o++)if(o===a){t[o].forceOpen=!0,i.push(t[o]);break}r(i)},handlePrev:function(){var t=m(e.data),n=s;(n-=1)<0&&(n=t.length-1);for(var a=[],i=0;i<t.length;i++)if(i===n){t[i].forceOpen=!0,a.push(t[i]);break}l(n),r(a)},handleNext:function(){for(var t=m(e.data),n=s,a=[],i=0;i<t.length;i++)if(i===n){t[i].forceOpen=!0,a.push(t[i]);break}(n+=1)===t.length&&(n=0),l(n),r(a)},handleReset:function(){var t=m(e.data);t.map(function(e){return e.forceOpen=!1,0}),l(0),r(t)}}),n.map(function(e,t){return i.a.createElement(b,{term:e,key:t})}))}),w=(n(66),n(203),n(9).default.enqueue,i.a.createContext({}));function v(e){var t=e.staticQueryData,n=e.data,a=e.query,r=e.render,o=n?n.data:t[a]&&t[a].data;return i.a.createElement(i.a.Fragment,null,o&&r(o),!o&&i.a.createElement("div",null,"Loading (StaticQuery)"))}var y=function(e){var t=e.data,n=e.query,a=e.render,r=e.children;return i.a.createElement(w.Consumer,null,function(e){return i.a.createElement(v,{data:t,query:n,render:a||r,staticQueryData:e})})};var k=function(){return i.a.createElement(y,{query:"279230421",render:function(e){return i.a.createElement("div",{className:"App"},i.a.createElement(f,{data:e}))},data:s})};t.default=function(){return i.a.createElement(r.a,null,i.a.createElement(o.a,{title:"Home"}),i.a.createElement(k,null))}},197:function(e,t,n){"use strict";var a=n(0),i=n.n(a);n(200);t.a=function(e){var t=e.children;return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0px 1.0875rem 1.45rem",paddingTop:0}},i.a.createElement("main",null,t)))}},198:function(e,t,n){"use strict";var a=n(199),i=n(0),r=n.n(i),o=n(201),s=n.n(o);function l(e){var t=e.description,n=e.lang,i=e.meta,o=e.title,l=a.data.site,m=t||l.siteMetadata.description;return r.a.createElement(s.a,{htmlAttributes:{lang:n},title:o,titleTemplate:"%s | "+l.siteMetadata.title,meta:[{name:"description",content:m},{property:"og:title",content:o},{property:"og:description",content:m},{property:"og:type",content:"website"},{name:"twitter:card",content:"summary"},{name:"twitter:creator",content:l.siteMetadata.author},{name:"twitter:title",content:o},{name:"twitter:description",content:m}].concat(i)})}l.defaultProps={lang:"en",meta:[],description:""},t.a=l},199:function(e){e.exports={data:{site:{siteMetadata:{title:"20 Patterns in Software Teams",description:"A review of GitPrime 20 Patterns e-book as a PWA (version 0.1.1)",author:"Al Piepho"}}}}},203:function(e,t,n){var a;e.exports=(a=n(220))&&a.default||a},211:function(e){e.exports={data:{allSiteTermsJson:{edges:[{node:{name:"1. Domain Champion",description:"(Individual) The Domain Champion is an expert in a particular area of the codebase. They know nearly everything there is to know about their domain: every class, every method, every algorithm and pattern.",imagePre:"",imagePost:"./images/screeshot_1_domain.png",subtermsimple:{name:"How to recognize it",description:"Domain Champions will always work in the same area of code. They’ll also rewrite their code over and over, and you’ll see it in churn and legacy refactoring metrics as they perfect it...."},subtermlist:{name:"What to do",ordered:!0,list:[{description:"Acknowledge their expertise and encourage them to share..."},{description:"Ask them what they like to work on..."},{description:"Ask them if they are willing to take on a small assignment outside their domain..."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"2. Hoarding the Code",description:"(Individual) This pattern refers to the work behavior of repeatedly working privately and hoarding all work in progress to deliver one giant pull request at the end of the sprint.",imagePre:"",imagePost:"./images/screeshot_2_hoarding.png",subtermsimple:{name:"How to recognize it",description:"Large and infrequent commits can be a sign that the engineer is working privately until their project is finished, and then submitting their work all at once..."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Above all else, be compassionate. Odds are, you’ve recognized this pattern right before or just after the end of a sprint, so these engineers are likely tired, stressed, and worn out...."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"3. Unusually High Churn",description:"(Individual) Churn is a natural and healthy part of the development process and varies from project to project. However, Unusually High Churn is often an early indicator that a team or a person may be struggling with an assignment.",imagePre:"",imagePost:"./images/screeshot_3_churn.png",subtermsimple:{name:"How to recognize it",description:"This pattern is characterized by high levels of churn in the back of the sprint or project. Watch for churn rates that climb significantly above the engineer’s historical average..."},subtermlist:{name:"What to do",ordered:!0,list:[{description:"(from external) Show the data. Show how late arriving specs or last-minute changes are throwing the project off."},{description:"(from external) Pull the ticket from the sprint, or decide on an MVP and split off the additions into a refinement sprint."},{description:"(from internal) Ask for a pre-submit code review or a rubber duck."},{description:"(from internal) Ask to split the work. The act of dividing the work often reveals the root issue."},{description:"(from internal) Ask a more senior engineer to assess what “good enough” is in the context of the project."},{description:"(from internal) If the problem is difficult, or if the domain is unfamiliar, bring in another engineer to pair program."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"4. Bullseye Commits",description:"(Individual) This pattern is relatively common in most teams, but it often goes unrecognized: an engineer understands a problem, breaks down the project into smaller tasks, and submits code that has little room for improvement.",imagePre:"",imagePost:"./images/screeshot_4_bullseye.png",subtermsimple:{name:"How to recognize it",description:"In practice, Bullseye Commits can be identified by when they were submitted in regard to the deadline, their impact, and how they were treated in the review process. Generally, the code was started and completed in advance of the deadline..."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Recognize a clean bullseye in a stand-up, or a simple note: “I saw that check-in, nice job!” Whether it’s public or private, showing that you noticed and that you care will only reinforce this pattern."},{description:"If there’s an engineer who regularly makes Bullseye Commits, it may be helpful for others to understand how they approach projects. Ask the engineer to do a lunch and learn, or consider asking them to provide feedback on another engineer’s work in the review process."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"5. Heroing",description:"(Individual) Right before a release, the “Hero” finds some critical defect and makes a diving catch to save the day. More formally, Heroing is the reoccurring tendency to fix other people’s work at the last minute.",imagePre:"",imagePost:"./images/screeshot_5_heroing.png",subtermsimple:{name:"How to recognize it",description:"The Hero typically dominates GitPrime’s Help Others metric, particularly in the form of late arriving check-ins. They’re also distinguishable in the review process, where they may be self-merging PRs (and typically right before the deadline), or they will show very low Receptiveness in the review process (meaning either others aren’t providing substantial feedback or the Hero isn’t incorporating it)."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Rather than managing the ‘saves,’ manage the code review process... "}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"6. Over Helping",description:"(Individual) Collaboration among teammates is a natural and expected part of the development process. Over Helping is the pattern whereby one developer spends unnatural amounts of time helping another developer to get their work across the line.",imagePre:"",imagePost:"./images/screeshot_6_overhelping.png",subtermsimple:{name:"How to recognize it",description:"You’ll notice this pattern in the same way you’d realize “Heroing” (Pattern #5) in GitPrime’s Review and Collaboration reports and the Help Others metric. Look for reoccurring, last-minute corrections between the same two people."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Bring additional engineers into the code review process."},{description:"Cross-train and assign both engineers to different areas of the codebase."},{description:"Assign the senior engineer a very challenging project. The idea here is to give them challenging projects where they don’t have the time or energy to review their colleague’s work."},{description:"Lastly, the stronger of the two is showing natural leadership and coaching tendencies. Look for opportunities to feed this more broadly to the whole team."},{description:"One note of caution: be mindful when the two engineers are friends or were colleagues at a former employer. Making light of a friendship or teasing them can be incredibly damaging and hurtful. Go the extra mile to keep it professional."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"7. Clean As You Go",description:"(Individual) A codebase is continuously evolving by nature, but it doesn’t evolve evenly across all aspects. A Clean As You Go engineer will notice and refine shortcomings even if it’s not essential to the task at hand.",imagePre:"",imagePost:"./images/screeshot_7_clean.png",subtermsimple:{name:"How to recognize it",description:"“Clean As You Go” refers to when an engineer contributes new code and also mends adjacent code in the codebase. Consequently, you’ll notice these engineers writing new code while also showing higher levels of legacy refactoring, that together usually exceed the expected scope of change for the assignment at hand."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Recognize this engineer’s work publicly and use it as a model for other team members to work towards. Regularly acknowledge it in sprint retrospectives and standups, even after you first observe the pattern. Consistent acknowledgment lets everyone know you value this effort."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"8. In the Zone",description:"(Individual) This pattern is exhibited by engineers whose work is, in a word, consistent. They have a knack for getting in the zone and shipping high-quality work week in and week out. Their work is reliable and predictable in nearly every way.",imagePre:"",imagePost:"./images/screeshot_8_inthezone.png",subtermsimple:{name:"How to recognize it",description:"An engineer in the zone organizes their day to eliminate distraction and focus on delivering business value. Their Active Days are consistently above average. Their Impact is high and consistent. Their PRs are timely, evenly paced, and nicely sized. They consistently participate in reviews, so their Involvement is high and consistent. Their churn is usually lower than average."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Similar to engineers who exhibit the “Clean As You Go” pattern, it helps to acknowledge this pattern either publicly, privately, or both."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"9. Bit Twiddling",description:"(Individual) Bit Twiddling is like working on jigsaw puzzle to the point where everything looks the same and you’re not making progress anymore. You might pick up the same piece, try it in a few places, rotate it, put down, only to pick it up a few minutes later.",imagePre:"",imagePost:"./images/screeshot_9_bittwiddling.png",subtermsimple:{name:"How to recognize it",description:"Look for high rates of churn in the same area of the code. The key is to couple repetition and refactoring with ambivalence or indifference in code review over an extended period."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Look for ways to reenergize the engineer with a new project. Find a ticket, even a small one, that will lead into new and interesting areas of the code — even if it comes at the expense of the team’s productivity in the short-term."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"10. The Busy Body",description:"(Individual) The Busy Body is an engineer who skips all over the codebase: they’ll fix a front-end problem here, jump to some refactoring, then fiddle with the database over there.",imagePre:"",imagePost:"./images/screeshot_10_busybody.png",subtermsimple:{name:"How to recognize it",description:"Engineers exhibiting this pattern will show high levels of Impact and lots of small pull requests without any identifiable home base in the code. They’ll show a high level of Involvement in the review process. And because they typically spend their time building and spend less time bug fixing their own work, they’ll show high levels of new work and relatively low churn."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Give these engineers something to own top to bottom. Whether it’s a module, a new feature, or a large project, ask them to do more than just ‘get it done’. Ask them to become an expert in that particular area or on that specific project."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"11. Scope Creep",description:"(Team) Intuitively, we all know what Scope Creep is — along with its associated risks. Still, there are plenty of different definitions for the issue so here’s what we’re focusing on:",imagePre:"",imagePost:"./images/screeshot_11_scopecreep.png",subtermsimple:{name:"How to recognize it",description:"Scope Creep is characterized by a sharp uptick in progress toward the back of a sprint that wasn’t driven by code review."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Use GitPrime data to show the additional work caused by the scope creep. Scope creep is caused by poor planning and insufficient attention during design. It’s not the engineer’s responsibility to shoulder the work resulting from bad specs. Call it out! Let the people who are responsible for pushing a poorly designed project into implementation know that it’s simply not ok."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"12. Flaky Product Ownership",description:"(Team) Miscommunications between Product and Engineering can easily lead to Scope Creep. Flaky Product Ownership, however, can show up slightly different in the data and also generally requires a different approach.",imagePre:"",imagePost:"./images/screeshot_12_flaky.png",subtermsimple:{name:"How to recognize it",description:"This pattern tends to reveal itself in recurring scope creep driven by the same product owner. You may notice a significant expansion of code that wasn’t driven by code review in the back of the sprint."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Ambiguous or changing requirements from a Product Owner can often be a sign that that person is stretched thin. They have too much to work on, so nothing gets their full attention. It’s helpful, for that reason, to have a discussion with their manager. Bringing data to the discussion can eliminate skepticism around what’s happening and help cut straight to the discussion about how to resolve the situation."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"13. Expanding Refactor",description:"(Team) Expanding refactors happen when a planned effort to improve or revise a section of code triggers a dramatic widening of scope.",imagePre:"",imagePost:"./images/screeshot_13_expandingrefactor.png",subtermsimple:{name:"How to recognize it",description:"A small amount of legacy refactoring is healthy. It’s when you notice a whole slew of changes in areas that are unrelated to the feature at hand."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Open the topic up for discussion with the team. Ask team members to make a case for and against the refactor, and then come to a conclusion about whether it’s best to move forward with the project, drop it, or tackle it with a different approach."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"14. Just One More Thing",description:"(Team) 'Just One More Thing' refers to the pattern of late-arriving pull requests. A team submits work, but then—right before the deadline—they jump in and make additions to that work.",imagePre:"",imagePost:"./images/screeshot_14_justonemore.png",subtermsimple:{name:"How to recognize it",description:"“Just One More Thing,” when appearing across a team, is characterized by a spike in PRs being submitted near the end of a sprint after the main PR was approved. These engineers will also show a high level of New Work."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Late-arriving PRs are a sign that work is being rushed and given less review. Even when the work is submitted by engineers who are very familiar with the code, the PRs should be treated as riskier than other equally sized PRs that are submitted earlier in the sprint."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"15. Rubber Stamping",description:"(Team) Rubber Stamping is the process by which an engineer approves their colleague’s PR without giving it a substantial review.",imagePre:"",imagePost:"./images/screeshot_15_rubberstamp.png",subtermsimple:{name:"How to recognize it",description:"Rubber Stamping is most noticeable in the Review and Collaboration reports. Watch the Review Workflow for PRs that opened and closed in a preposterously short period of time, with a very low level of Receptiveness. Low levels of engagement in reviews can also be seen in the Involvement and Review Coverage metrics."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"While reviewing other people’s work is a substantial part of what it means to be a professional software developer, it’s not always recognized as such. Rubber Stamping often occurs in environments where the review process is given little attention or recognition; when leadership praises the behaviors they want to see in code reviews, we generally see that the way people work will shift to match those expectations."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"16. Knowledge Silos",description:"(Team) Knowledge Silos are usually experienced between departments in traditional organizational structures, but they also form within teams when information is not passing freely between individuals.",imagePre:"",imagePost:"./images/screeshot_16_knowledgesilos.png",subtermsimple:{name:"How to recognize it",description:"When team members are co-located, a basic understanding of where people sit in an office along with an awareness of any other social bonds can be helpful indicators as to where silos may form."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Bring in the outsiders! One of the most natural ways to manage this pattern is to look for outliers and stranded engineers and get those individuals involved in the review process. You can also see whether there’s anyone who could be cross-trained or onboarded on a specific area of the code that an engineering within the silo is working on."},{description:"Assign other engineers to review the work of the individuals that make up the silo, and have the individuals within that tight-knit group review the work of others outside their group."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"17. Self-Merging PRs",description:"(Team) This pattern refers to when an engineer opens a pull request and then approves it themselves. This means no one else reviewed the work and it’s headed to production!",imagePre:"",imagePost:"./images/screeshot_17_selfmerging.png",subtermsimple:{name:"How to recognize it",description:"Self-merging is easy to see because the submitter and the reviewer are the same people. In GitPrime, these instances will show up in the team’s Unreviewed PRs metric as well as in their Review Workflow."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Many organizations prevent self-merging PRs by configuring their build systems to reject them. Enforced review is most common among companies that work under regulatory compliance, like Fintech or Biotech companies...."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"18. Long-Running PRs",description:"(Team) Long-running pull requests are PRs that have been open for a very long time (more than a week). A PR that doesn’t close in a normal amount of time (within a day) can indicate uncertainty or disagreement about the code.",imagePre:"",imagePost:"./images/screeshot_18_longrunning.png",subtermsimple:{name:"How to recognize it",description:"Long-running PRs can quickly be identified in the team’s Review Workflow report, filtered by ‘PR Status: Open’ and sorted by ‘oldest PRs’. Select the number of PRs you’d like to see in one view, then hover over those that have been open for more than a day."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"It’s usually best to first check in with the Submitter. It’s their responsibility to get their work across the line, so they should be encouraged to bubble up disagreements or uncertainties as they arise...."},{description:"To manage this pattern in the long-term, consider setting expectations or targets around Time to First Comment, and Time to Resolve..."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"19. A High Bus Factor",description:"(Team) 'Bus factor' is a thought experiment that asks what the consequence would be if an individual team member were hit by a bus. More specifically:",imagePre:"",imagePost:"./images/screeshot_19_highbusfactor.png",subtermsimple:{name:"How to recognize it",description:"A team’s distribution of knowledge can be visualized with the Knowledge Sharing Index. It’s best to use this report within teams that you would expect to review each other’s work...."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"Knowledge Distribution can be achieved when team members are making small and frequent commits, and there’s a healthy level of collaboration and debate in reviews from everyone on the team. It can be helpful to keep this in mind when providing feedback in 1:1s and when onboarding new hires to the team...."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"20. Sprint Retrospectives",description:"(Team) Retrospectives are a common practice that offer an easy way to continuously improve: take time to reflect, as an individual or a team, on a project, action, or occurrence.",imagePre:"",imagePost:"./images/screeshot_20_retrospectives.png",subtermsimple:{name:"How to recognize it",description:"A good Sprint Retrospective uses data to help people compare what they felt happened during the sprint and what actually happened in the sprint."},subtermlist:{name:"What to do",ordered:!1,list:[{description:"As a manager of managers, it helps to coach managers of individual contributors on the practice of including data in their retrospectives..."}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}},{node:{name:"",description:"",imagePre:"",imagePost:"",subtermsimple:{name:"",description:""},subtermlist:{name:"",ordered:!1,list:[{description:""}]},subtermlinks:{name:"",list:[{name:"",url:""}]},subtermgoogle:{name:"",list:[{name:""}]}}}]}}}},213:function(e,t){e.exports={siteTitle:"20 Patterns in Software Teams",siteImagePre:"./images/gitprime-icon.png",siteImagePost:"",siteNote:"NOTE: This is an interactive way to study the given concepts.  It is also a PWA, installable IOS (home screen) via Safari.",siteDescription:"A review of GitPrime 20 Patterns e-book as a PWA (version 0.1.1)",siteNoteGitHub:"https://github.com/alpiepho/gitprime-patterns.git",googleAnalyticsId:"UA-nnnnnnnnn-n",authorName:"Al Piepho",pathPrefix:"/gitprime-patterns",icon:"src/images/site-icon.png",background_color:"#ffffff",theme_color:"#000000",display:"standalone"}},220:function(e,t,n){"use strict";n.r(t);n(23);var a=n(0),i=n.n(a),r=n(126);t.default=function(e){var t=e.location,n=e.pageResources;return n?i.a.createElement(r.a,Object.assign({location:t,pageResources:n},n.json)):null}}}]);
//# sourceMappingURL=component---src-pages-index-js-10d3464afca296df2fb1.js.map